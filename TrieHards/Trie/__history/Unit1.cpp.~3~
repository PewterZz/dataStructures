//---------------------------------------------------------------------------

#include <fmx.h>
#include <iostream>
#include <string>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <fstream>
#include <chrono>
#pragma hdrstop

#include "Unit1.h"
#include "Unit3.h"
#include "Project1PCH1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TForm1 *Form1;
//---------------------------------------------------------------------------

using std::cout;
using std::cin;
using std::getline;
using std::string;
using std::endl;
using namespace std::chrono;

const int T_S = 560097;
string alpha[555], CL1[555], CD1[555];

int hashfunc(string key){
	int hash = 0;
	for(int i=0;i < key.size(); i++){
		hash += static_cast<int>(key[i]);
	}
	hash = hash % T_S;
	return hash;
}

class HashTableEntry {
   public:
	  string word;
	  string type;
	  string definition;

	  HashTableEntry(string k, string type, string v) {
		 this->word = k;
		 this->type = type;
		 this->definition = v;
      }
};
class HashMapTable {
   private:
      HashTableEntry **t;
   public:
      HashMapTable() {
         t = new HashTableEntry * [T_S];
         for (int i = 0; i < T_S; i++) t[i] = NULL;
	  }
	  void Insert(string k, string j, string v) {
		 int h = hashfunc(k);
		 cout << h << "\n";
		 while (t[h] != NULL && t[h]->definition != k) {
			h = (h + 1) % T_S;
		 }
		 if (t[h] != NULL)
			delete t[h];
		 t[h] = new HashTableEntry(k, j, v);
	  }

	  string SearchKey(string k) {
		 int h = hashfunc(k);
		 string temp;
		 while (t[h] != NULL && t[h]->word != k) {
			h = (h + 1) % T_S;
		 }
		 if (t[h] != NULL){
			Form1->ListBox1->Items->Add((t[h]->word + ", " + t[h]->type + " : " + t[h]->definition).c_str());
			return "ues";
		 }

		 return "nvm";
	  }

	  void ShowAll(){
		int i = 0;
		Form1->ListBox1->Items->Clear();
		while(i < 555){
			Form1->ListBox1->Items->Add((alpha[i] + ", " + CL1[i] + " : " + CD1[i]).c_str());
			i += 1;
		}
	  }

};

HashMapTable hash;

string& rtrim(string &str, string const &whitespace = " \r\n\t\v\f")
{
    str.erase(str.find_last_not_of(whitespace) + 1);
    return str;
}

string& ltrim(string &str, string const &whitespace = " \r\n\t\v\f")
{
    str.erase(0, str.find_first_not_of(whitespace));
	return str;
}

ifstream coeff("C:\\Users\\ACER\\Downloads\\dictionary.csv");

__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	int i = 0;
	string alpha1,CD,CL,CY, temp;


	if(coeff.is_open()){
		while(i < 555){
			getline(coeff, temp, '"');
			getline(coeff, alpha1, '"');
			alpha[i] = alpha1;
			getline(coeff, temp, ',');
			getline(coeff, temp, '"');
			getline(coeff, CL, '"');
			CL1[i] = CL;
			getline(coeff, temp, ',');
			getline(coeff, temp, '"');
			getline(coeff, CD, '"');
			CD1[i] = CD;
			getline(coeff, temp, '\n');
			hash.Insert(ltrim(rtrim(alpha1)),ltrim(rtrim(CL)), ltrim(rtrim(CD)));
			Form1->ListBox1->Items->Add((alpha1 + ", " + CL + " : " + CD).c_str());


			i = i+1;

		}
		coeff.close();
			auto start = steady_clock::now();
			auto end = steady_clock::now();
			double elapsed_time = double(duration_cast<nanoseconds> (end-start).count());
			cout << "Running time: " << elapsed_time;


	}

    else{
		Form1->ListBox1->Items->Add("Nop");
	};

}
//---------------------------------------------------------------------------






void __fastcall TForm1::Button1Click(TObject *Sender)
{
	String taskText= Edit1->Text;
	AnsiString text = taskText;
	string res;
	if(!taskText.IsEmpty()){
		ListBox1->Items->Clear();
		res = hash.SearchKey(text.c_str());
		if(res == "nvm"){
			ShowMessage("Not Found");
		}
	}
	else{
		hash.ShowAll();
		}
	}



