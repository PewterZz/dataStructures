//---------------------------------------------------------------------------

#include <fmx.h>
#include <iostream>
#include <locale>
#include <string>
#include <iomanip>
#include <sstream>
#include <string>
#include <iomanip>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <fstream>
#include <cstring>
#include <chrono>
#pragma hdrstop

#include "Main.h"
#include "TrieHardsPCH1.h"
#include "Insert.h"
#include "Update.h"
#include "Delete.h"
#define CHAR_SIZE 126
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TDictionary *Dictionary;
//---------------------------------------------------------------------------
using std::getline;
using std::string;
using std::endl;
using namespace std::chrono;

const int T_S = 596497;
int index;
int size = 1040;

string& rtrim(string &str, string const &whitespace = " \r\n\t\v\f\"")
{
	str.erase(str.find_last_not_of(whitespace) + 1);
	return str;
}

string& ltrim(string &str, string const &whitespace = " \r\n\t\v\f\"")
{
	str.erase(0, str.find_first_not_of(whitespace));
	return str;
}

string ToNarrow( const wchar_t *s, char dfault = '?',
					  const std::locale& loc = std::locale() )
{
  std::ostringstream stm;

  while( *s != L'\0' ) {
	stm << std::use_facet< std::ctype<wchar_t> >( loc ).narrow( *s++, dfault );
  }
  return stm.str();
}

template <class T>
void swapper(T &x, T &y)
  {
	  T temp;
	  temp = x;
	  x = y;
      y = temp;
  }

template <class T>
void selectionSort(T array[], int size)
  {
      int lowestPosition;
	  T lowestValue;

	  for (int i = 0; i < size - 1; i++)
	  {
          lowestValue = array[i];
		  lowestPosition = i;
          for (int j = i + 1; j < size; j++)
		  {
              if (array[j] < lowestValue)
              {
                  lowestPosition = j;
                  lowestValue = array[j];
              }
		  }
          swapper(array[i], array[lowestPosition]);
      }
  }


template <class T>
string split(string str, T del){
	  string temp = "";

	  for(int i=0; i<(int)str.size(); i++){
		 if(str[i] != del){
			temp += str[i];
		}
		  else{
			return temp;
			  temp = "";
		}
	}

	  return temp;
}

class Trie
{
public:
    bool isLeaf;
    Trie* character[CHAR_SIZE];

    // Constructor
    Trie()
    {
        this->isLeaf = false;

        for (int i = 0; i < CHAR_SIZE; i++) {
            this->character[i] = nullptr;
        }
    }

    void insert(string);
    bool deletion(Trie*&, string);
    bool search(string);
    bool haveChildren(Trie const*);
};

// Iterative function to insert a key into a Trie
void Trie::insert(string key)
{
    // start from the root node
    Trie* curr = this;
    for (int i = 0; i < key.length(); i++)
    {
        // create a new node if the path doesn't exist
        if (curr->character[key[i]] == nullptr) {
            curr->character[key[i]] = new Trie();
        }

        // go to the next node
        curr = curr->character[key[i]];
    }

    // mark the current node as a leaf
    curr->isLeaf = true;
}

// Iterative function to search a key in a Trie. It returns true
// if the key is found in the Trie; otherwise, it returns false
bool Trie::search(string key)
{
    // return false if Trie is empty
    if (this == nullptr) {
        return false;
    }

    Trie* curr = this;
    for (int i = 0; i < key.length(); i++)
    {
        // go to the next node
        curr = curr->character[key[i]];

        // if the string is invalid (reached end of a path in the Trie)
        if (curr == nullptr) {
            return false;
        }
    }

    // return true if the current node is a leaf and the
    // end of the string is reached
    return curr->isLeaf;
}

// Returns true if a given node has any children
bool Trie::haveChildren(Trie const* curr)
{
    for (int i = 0; i < CHAR_SIZE; i++)
    {
        if (curr->character[i]) {
            return true;    // child found
        }
    }

    return false;
}

// Recursive function to delete a key in the Trie
bool Trie::deletion(Trie*& curr, string key)
{
    // return if Trie is empty
    if (curr == nullptr) {
        return false;
    }

    // if the end of the key is not reached
    if (key.length())
    {
        // recur for the node corresponding to the next character in the key
        // and if it returns true, delete the current node (if it is non-leaf)

        if (curr != nullptr &&
            curr->character[key[0]] != nullptr &&
            deletion(curr->character[key[0]], key.substr(1)) &&
            curr->isLeaf == false)
        {
            if (!haveChildren(curr))
            {
                delete curr;
                curr = nullptr;
                return true;
            }
            else {
                return false;
            }
        }
    }

    // if the end of the key is reached
    if (key.length() == 0 && curr->isLeaf)
    {
        // if the current node is a leaf node and doesn't have any children
        if (!haveChildren(curr))
        {
            // delete the current node
            delete curr;
            curr = nullptr;

            // delete the non-leaf parent nodes
            return true;
        }

        // if the current node is a leaf node and has children
        else {
            // mark the current node as a non-leaf node (DON'T DELETE IT)
            curr->isLeaf = false;

            // don't delete its parent nodes
            return false;
        }
    }

    return false;
}

ifstream coeff("C:\\Users\\ACER\\Documents\\Project\\dictionary - Sheet1.csv");
Trie* head = new Trie();

__fastcall TDictionary::TDictionary(TComponent* Owner)
	: TForm(Owner)
{
	int i = 0;
	string alpha1,CD,CL,CY,temp;


	if(coeff.is_open()){
		while(i < size){
			getline(coeff, alpha1, ',');
			getline(coeff, CL, ',');
			getline(coeff, CD, '\n');
			Dictionary->ListBox1->Items->Add((alpha1 + ", " + CL + " : " + CD).c_str());
			transform(alpha1.begin(), alpha1.end(), alpha1.begin(), ::tolower);
			head->insert(alpha1);

			i = i+1;

		}
		coeff.close();
		Dictionary->Edit2->Text = "0.00 ms";
	}

	else{
		Dictionary->ListBox1->Items->Add("Dictionary File not found.");
	};

}
//---------------------------------------------------------------------------





//
void __fastcall TDictionary::SearchClick(TObject *Sender)
{
//	String taskText= Edit1->Text;
//	AnsiString text = taskText;
//	int res;
//	if(!taskText.IsEmpty()){
//		ListBox1->Items->Clear();
//		res = hash.SearchKey(text.c_str());
//		if(res == 0){
//			ShowMessage("Not Found \t\t\t");
//		}
//		else{
//			hash.display(res);
//		}
//	}
//	else{
//		hash.ShowAll();
//		}
//
//	Edit1->Text = "";
	}
//
void __fastcall TForm2::InsertionClick(TObject *Sender)
{
//	String wordText = Edit2->Text;
//	string word = ToNarrow(wordText.c_str());
//	alpha[size] = rtrim(ltrim(word));
//	String typeText = Edit1->Text;
//	string type = ToNarrow(typeText.c_str());
//	bairon[size] = rtrim(ltrim(type));
//	String defText = Edit3->Text;
//	string def = ToNarrow(defText.c_str());
//	charlie[size] = rtrim(ltrim(def));
//	size += 1;
//	hash.Insert(word,type, def);
//	Dictionary->ListBox1->Items->Add((wordText + ", " + typeText + " : " + defText).c_str());
//	Close();
}
//
void __fastcall TForm3::UpdateShowClick(TObject *Sender)
{
//	String wordText = Edit2->Text;
//	string word = ToNarrow(wordText.c_str());
//	string res = hash.update(word, "lol");
//	if(res == "nvm"){
//		ShowMessage("Not Found \t\t\t");
//	}else{
//		Edit1->Text = res.c_str();
//	}
//
//
}
//
void __fastcall TForm3::UpdateYesClick(TObject *Sender){
//	String wordText = Edit2->Text;
//	string word = ToNarrow(wordText.c_str());
//	String defText = Edit3->Text;
//	string newdef = ToNarrow(defText.c_str());
//	string res = hash.update(word, newdef);
//	int i = 0;
//	while(i < size){
//		if(word == alpha[i]){
//			charlie[i] = newdef;
//			Dictionary->ListBox1->Items->Clear();
//			hash.ShowAll();
//		}
//		i += 1;
//	}
//	Close();
}
//
////---------------------------------------------------------------------------
//
void __fastcall TDictionary::InsertClick(TObject *Sender)
{
//	TForm2 *Form2;
//	Form2 = new TForm2(this);
//	Form2->ShowModal();
}
////---------------------------------------------------------------------------
//
//
//
void __fastcall TDictionary::UpdateClick(TObject *Sender)
{
//	TForm3 *Form3;
//	Form3 = new TForm3(this);
//	Form3->ShowModal();
}
////---------------------------------------------------------------------------
//
void __fastcall TDictionary::ListBox1ItemClick(TCustomListBox * const Sender, TListBoxItem * const Item)
{
//	TForm1 *Form1;
//	Form1 = new TForm1(this);
//	Form1->ShowModal();
}
//
void __fastcall TForm1::YesClick(TObject *Sender)
{
//	int i = 0;
//	index = Dictionary->ListBox1->Selected->Index;
//	String one = Dictionary->ListBox1->Selected->Text;
//	string j = split(ToNarrow(one.c_str()), ',');
//	while(i < size){
//		if(alpha[i] == j){
//			index = i;
//		}
//		i += 1;
//	}
//	Dictionary->ListBox1->Items->Delete(index);
//	hash.deleteElement(j);
//	while(index < size){
//		alpha[index] = alpha[index+1];
//		bairon[index] = bairon[index+1];
//		charlie[index] = charlie[index+1];
//		index += 1;
//	}
//	size -= 1;
//	Close();
}
////---------------------------------------------------------------------------
//
//
//
void __fastcall TDictionary::SortClick(TObject *Sender)
{
//	int i = 0;
//	string temp1 = alpha[0]; string temp2 = bairon[0]; string temp3 = charlie[0];
//	auto sortstart = steady_clock::now();
//	selectionSort(alpha, size);
//	auto sortend = steady_clock::now();
//	double elapsed_time = double(duration_cast<nanoseconds> (sortend-sortstart).count());
//	elapsed_time /= 1000000;
//	string time = std::to_string(elapsed_time);
//	Dictionary->ListBox1->Items->Clear();
//	int h;
//	while(i < size){
//		h = hash.SearchKey(alpha[i]);
//		if(h != 0){
//			hash.display(h);
//		}
//		i += 1;
//	}
//	Dictionary->Edit2->Text = (time + " ms").c_str();
//	Dictionary->ListBox1->Items->Insert(0, (temp1 + ", " + temp2 + ": " + temp3).c_str());
}
//---------------------------------------------------------------------------

